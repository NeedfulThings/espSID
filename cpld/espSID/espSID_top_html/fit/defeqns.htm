<html><head><link type='text/css' href='style.css' rel='stylesheet'></head><body class='pgBgnd'>
<h3 align='center'>Equations</h3>
<table width='90%' align='center' border='1' cellpadding='0' cellspacing='0'>
<tr><td>
</td></tr><tr><td>
********** Mapped Logic **********
</td></tr><tr><td>
FTCPE_divider/clk_counter0: FTCPE port map (divider/clk_counter(0),'1',clk,'0','0');
</td></tr><tr><td>
FTCPE_divider/clk_counter1: FTCPE port map (divider/clk_counter(1),divider/clk_counter_T(1),clk,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;divider/clk_counter_T(1) <= ((NOT divider/clk_counter(0))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (NOT divider/clk_counter(1) AND NOT divider/clk_counter(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	divider/clk_counter(3)));
</td></tr><tr><td>
FTCPE_divider/clk_counter2: FTCPE port map (divider/clk_counter(2),divider/clk_counter_T(2),clk,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;divider/clk_counter_T(2) <= (divider/clk_counter(0) AND divider/clk_counter(1));
</td></tr><tr><td>
FTCPE_divider/clk_counter3: FTCPE port map (divider/clk_counter(3),divider/clk_counter_T(3),clk,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;divider/clk_counter_T(3) <= ((divider/clk_counter(0) AND divider/clk_counter(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	divider/clk_counter(2))
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (divider/clk_counter(0) AND NOT divider/clk_counter(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT divider/clk_counter(2) AND divider/clk_counter(3)));
</td></tr><tr><td>
</td></tr><tr><td>
led_d1 <= '0';
</td></tr><tr><td>
FDCPE_led_d2: FDCPE port map (led_d2,NOT spi/ss_r(0),clk,'0','0');
</td></tr><tr><td>
FDCPE_ram_in0: FDCPE port map (ram_in(0),spi/mosi_r(1),clk,'0','0',ram_in_CE(0));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ram_in_CE(0) <= (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/bit_cnt(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/sclk_r(1) AND NOT spi/sclk_r(2) AND led_d2);
</td></tr><tr><td>
</td></tr><tr><td>
sid_addr(0) <= '0';
</td></tr><tr><td>
</td></tr><tr><td>
sid_addr(1) <= '0';
</td></tr><tr><td>
</td></tr><tr><td>
sid_addr(2) <= '0';
</td></tr><tr><td>
</td></tr><tr><td>
sid_addr(3) <= '0';
</td></tr><tr><td>
</td></tr><tr><td>
sid_addr(4) <= '0';
</td></tr><tr><td>
FTCPE_sid_clk: FTCPE port map (sid_clk,'1',clk,'0','0',sid_clk_CE);
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sid_clk_CE <= (divider/clk_counter(0) AND NOT divider/clk_counter(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT divider/clk_counter(2) AND divider/clk_counter(3));
</td></tr><tr><td>
</td></tr><tr><td>
sid_cs <= '0';
</td></tr><tr><td>
FDCPE_sid_data0: FDCPE port map (sid_data(0),ram_in(0),clk,'0','0',sid_data_CE(0));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sid_data_CE(0) <= (write_en AND NOT write_addr(0) AND NOT write_addr(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT write_addr(2) AND NOT write_addr(3) AND NOT write_addr(4));
</td></tr><tr><td>
</td></tr><tr><td>
sid_data(1) <= '0';
</td></tr><tr><td>
</td></tr><tr><td>
sid_data(2) <= '0';
</td></tr><tr><td>
</td></tr><tr><td>
sid_data(3) <= '0';
</td></tr><tr><td>
</td></tr><tr><td>
sid_data(4) <= '0';
</td></tr><tr><td>
</td></tr><tr><td>
sid_data(5) <= '0';
</td></tr><tr><td>
</td></tr><tr><td>
sid_data(6) <= '0';
</td></tr><tr><td>
</td></tr><tr><td>
sid_data(7) <= '0';
</td></tr><tr><td>
</td></tr><tr><td>
sid_rw <= '0';
</td></tr><tr><td>
FTCPE_spi/bit_cnt0: FTCPE port map (spi/bit_cnt(0),spi/bit_cnt_T(0),clk,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spi/bit_cnt_T(0) <= ((spi/bit_cnt(0) AND NOT led_d2)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (spi/sclk_r(1) AND NOT spi/sclk_r(2) AND led_d2));
</td></tr><tr><td>
FTCPE_spi/bit_cnt1: FTCPE port map (spi/bit_cnt(1),spi/bit_cnt_T(1),clk,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spi/bit_cnt_T(1) <= ((spi/bit_cnt(1) AND NOT led_d2)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (spi/bit_cnt(0) AND spi/sclk_r(1) AND NOT spi/sclk_r(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	led_d2));
</td></tr><tr><td>
FTCPE_spi/bit_cnt2: FTCPE port map (spi/bit_cnt(2),spi/bit_cnt_T(2),clk,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spi/bit_cnt_T(2) <= ((spi/bit_cnt(2) AND NOT led_d2)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/sclk_r(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT spi/sclk_r(2) AND led_d2));
</td></tr><tr><td>
FTCPE_spi/bit_cnt3: FTCPE port map (spi/bit_cnt(3),spi/bit_cnt_T(3),clk,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spi/bit_cnt_T(3) <= ((spi/bit_cnt(3) AND NOT led_d2)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/bit_cnt(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/sclk_r(1) AND NOT spi/sclk_r(2) AND led_d2));
</td></tr><tr><td>
FTCPE_spi/bit_cnt4: FTCPE port map (spi/bit_cnt(4),spi/bit_cnt_T(4),clk,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spi/bit_cnt_T(4) <= ((spi/bit_cnt(4) AND NOT led_d2)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/bit_cnt(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/bit_cnt(3) AND spi/sclk_r(1) AND NOT spi/sclk_r(2) AND led_d2));
</td></tr><tr><td>
FTCPE_spi/bit_cnt5: FTCPE port map (spi/bit_cnt(5),spi/bit_cnt_T(5),clk,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spi/bit_cnt_T(5) <= ((spi/bit_cnt(5) AND NOT led_d2)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/bit_cnt(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/bit_cnt(3) AND spi/bit_cnt(4) AND spi/sclk_r(1) AND NOT spi/sclk_r(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	led_d2));
</td></tr><tr><td>
FTCPE_spi/bit_cnt6: FTCPE port map (spi/bit_cnt(6),spi/bit_cnt_T(6),clk,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spi/bit_cnt_T(6) <= ((spi/bit_cnt(6) AND NOT led_d2)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/bit_cnt(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/bit_cnt(3) AND spi/bit_cnt(4) AND spi/bit_cnt(5) AND spi/sclk_r(1) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	NOT spi/sclk_r(2) AND led_d2));
</td></tr><tr><td>
FTCPE_spi/bit_cnt7: FTCPE port map (spi/bit_cnt(7),spi/bit_cnt_T(7),clk,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spi/bit_cnt_T(7) <= ((spi/bit_cnt(7) AND NOT led_d2)
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	OR (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/bit_cnt(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/bit_cnt(3) AND spi/bit_cnt(4) AND spi/bit_cnt(5) AND spi/bit_cnt(6) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/sclk_r(1) AND NOT spi/sclk_r(2) AND led_d2));
</td></tr><tr><td>
FDCPE_spi/mosi_r0: FDCPE port map (spi/mosi_r(0),mosi,clk,'0','0');
</td></tr><tr><td>
FDCPE_spi/mosi_r1: FDCPE port map (spi/mosi_r(1),spi/mosi_r(0),clk,'0','0');
</td></tr><tr><td>
FDCPE_spi/sclk_r0: FDCPE port map (spi/sclk_r(0),sclk,clk,'0','0');
</td></tr><tr><td>
FDCPE_spi/sclk_r1: FDCPE port map (spi/sclk_r(1),spi/sclk_r(0),clk,'0','0');
</td></tr><tr><td>
FDCPE_spi/sclk_r2: FDCPE port map (spi/sclk_r(2),spi/sclk_r(1),clk,'0','0');
</td></tr><tr><td>
FDCPE_spi/ss_r0: FDCPE port map (spi/ss_r(0),ss,clk,'0','0');
</td></tr><tr><td>
FDCPE_write_addr0: FDCPE port map (write_addr(0),spi/bit_cnt(3),clk,'0','0',write_addr_CE(0));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write_addr_CE(0) <= (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/bit_cnt(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/sclk_r(1) AND NOT spi/sclk_r(2) AND led_d2);
</td></tr><tr><td>
FDCPE_write_addr1: FDCPE port map (write_addr(1),spi/bit_cnt(4),clk,'0','0',write_addr_CE(1));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write_addr_CE(1) <= (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/bit_cnt(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/sclk_r(1) AND NOT spi/sclk_r(2) AND led_d2);
</td></tr><tr><td>
FDCPE_write_addr2: FDCPE port map (write_addr(2),spi/bit_cnt(5),clk,'0','0',write_addr_CE(2));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write_addr_CE(2) <= (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/bit_cnt(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/sclk_r(1) AND NOT spi/sclk_r(2) AND led_d2);
</td></tr><tr><td>
FDCPE_write_addr3: FDCPE port map (write_addr(3),spi/bit_cnt(6),clk,'0','0',write_addr_CE(3));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write_addr_CE(3) <= (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/bit_cnt(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/sclk_r(1) AND NOT spi/sclk_r(2) AND led_d2);
</td></tr><tr><td>
FDCPE_write_addr4: FDCPE port map (write_addr(4),spi/bit_cnt(7),clk,'0','0',write_addr_CE(4));
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write_addr_CE(4) <= (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/bit_cnt(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/sclk_r(1) AND NOT spi/sclk_r(2) AND led_d2);
</td></tr><tr><td>
FDCPE_write_en: FDCPE port map (write_en,write_en_D,clk,'0','0');
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;write_en_D <= (spi/bit_cnt(0) AND spi/bit_cnt(1) AND spi/bit_cnt(2) AND 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;	spi/sclk_r(1) AND NOT spi/sclk_r(2) AND led_d2);
</td></tr><tr><td>
Register Legend:
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FDCPE (Q,D,C,CLR,PRE,CE); 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FTCPE (Q,D,C,CLR,PRE,CE); 
<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LDCP  (Q,D,G,CLR,PRE); 
</td></tr><tr><td>
</td></tr>
</table>
<form><span class="pgRef"><table width="90%" align="center"><tr>
<td align="left"><input type="button" onclick="javascript:parent.leftnav.showTop()" onmouseover="window.status='goto top of page'; return true;" onmouseout="window.status=''" value="back to top"></td>
<td align="right"><input type="button" onclick="window.print()" onmouseover="window.status='print page'; return true;" onmouseout="window.status=''" value="print page"></td>
</tr></table></span></form>
</body></html>
